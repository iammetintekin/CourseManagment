// <auto-generated />
using System;
using App.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Infrastructure.Migrations
{
    [DbContext(typeof(PostreSqlDatabaseContext))]
    [Migration("20231117203134_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Grafik & Tasarım"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Siber Güvenlik"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Code = "EGT01",
                            Description = ".NET Framework, Microsoft tarafından geliştirilen, açık İnternet protokolleri ve standartları üzerine kurulmuş bir \"uygulama\" geliştirme platformu. Daha önce Sun Microsystems tarafından geliştirilmiş olan Java platformuna önemli benzerlikler göstermektedir. Buradaki uygulama kavramının kapsamı çok geniştir.",
                            Name = ".Net Eğitimi"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Code = "EGT02",
                            Description = "C#, birden fazla paradigmayı destekleyen genel amaçlı, üst düzey bir programlama dilidir. C#, statik yazım, güçlü yazım, sözcüksel kapsamlı, zorunlu, bildirimsel, işlevsel, genel, nesne yönelimli ve bileşen yönelimli programlama disiplinlerini kapsar.",
                            Name = "C# Temelleri"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Code = "EGT03",
                            Description = "Web geliştiricilerinin öğrenmesi gereken 3 farklı dil bulunmaktadır. Bunlar; web sayfalarının içeriğini tanımlamak için HTML, web sayfalarının düzenini belirlemek için CSS ve son olarak web sayfalarının davranışlarını programlamak için kullanılan JavaScript, yani kısaca JS'dir.",
                            Name = "Html, CSS, Javascript"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Code = "EGT04",
                            Description = "",
                            Name = "Photoshop"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Code = "EGT05",
                            Description = "",
                            Name = "Adobe CS 6"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Code = "EGT06",
                            Description = "",
                            Name = "Paint Dersleri"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Code = "EGT07",
                            Description = "",
                            Name = "Temel Sızma Eğitimleri"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Code = "EGT08",
                            Description = "",
                            Name = "Linux Dersleri"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Code = "EGT09",
                            Description = "",
                            Name = "Wireshark Kullanımı"
                        });
                });

            modelBuilder.Entity("App.Domain.Models.UserCourseMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("App.Domain.Models.Course", b =>
                {
                    b.HasOne("App.Domain.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("App.Domain.Models.UserCourseMapping", b =>
                {
                    b.HasOne("App.Domain.Models.Course", "Course")
                        .WithMany("Users")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("App.Domain.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("App.Domain.Models.Course", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
